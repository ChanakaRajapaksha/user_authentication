generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  username         String       @unique
  email            String       @unique
  password         String
  branch           String
  role             String?      @default("admin")
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model masterUser {
  id               Int          @id @default(autoincrement())
  empId            String       @unique @db.VarChar(20)
  role             String       @db.VarChar(50)
  username         String       @db.VarChar(100)
  email            String       @unique
  masterPassword   String?
  password         String?
  mobile           String       @db.VarChar(15)
  branch           String       @db.VarChar(50)
  status           String       @default("Active") @db.VarChar(10)
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model NetworkLog {
  id           Int         @id @default(autoincrement())
  userId       Int?
  masterUserId String?
  publicIp     String
  localIp      String
  macAddress   String
  username     String
  loggedAt     DateTime    @default(now())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteruser   masterUser? @relation(fields: [masterUserId], references: [empId], onDelete: Cascade)
}

model Patient {
  id                  String                @id @unique @default(uuid())
  mrdNumber           String                @unique
  visitType           String                @default("Consultation")
  referralCase        String?
  referredBy          String?               @db.VarChar(100)
  existing            String
  patientType         String?
  registrationDate    DateTime?             @default(now())
  patientPriority     String
  patientFullName     String                @db.VarChar(100)
  dob                 DateTime
  age                 String
  gender              String
  nationality         String
  emailId             String                @db.VarChar(50)
  maritalStatus       String
  visaType            String
  nationalId          String                @db.VarChar(20)
  idType              String
  idNumber            String                @db.VarChar(20)
  mobile              String                @db.VarChar(15)
  work                String?               @db.VarChar(15)
  landPhone           String?               @db.VarChar(15)
  wMobile             String?               @db.VarChar(15)
  preferredLanguage   Json?
  occupation          String                @db.VarChar(50)
  infoSource          String
  emirates            String
  place               String                @db.VarChar(50)
  mainDistrict        String
  district            String
  area                String
  address             String                @db.VarChar(500)
  hasanaId            String?               @db.VarChar(20)
  companyName         String                @db.VarChar(70)
  empId               String?               @db.VarChar(20)
  patientRemark       String?               @db.VarChar(500)
  emPerson            String?               @db.VarChar(100)
  emNumber            String?               @db.VarChar(15)
  relationship        String?               @db.VarChar(20)
  alert               String?
  specialty           String
  doctorName          String
  encounterType       String?
  paymentType         String
  corporateName       String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  insurance           Insurance[]
  patientDynamicField PatientDynamicField[]
}

model Insurance {
  id                     Int          @id @default(autoincrement())
  insuranceProvider      String
  subInsurance           String
  networkType            String
  insuranceCardNumber    String       @db.VarChar(20)
  extraCardNumber        String?      @db.VarChar(20)
  insuranceEffectiveDate DateTime
  insuranceExpiryDate    DateTime
  certificateNo          String       @db.VarChar(20)
  dependentsNo           String       @db.VarChar(2)
  insuranceClaimNo       String?      @db.VarChar(20)
  maxInsuranceLiability  Decimal      @db.Decimal(20, 2)
  insuranceApprovalLimit Decimal      @db.Decimal(20, 2)
  maxInsuranceCoPay      Decimal      @db.Decimal(20, 2)
  coPayPatient           Decimal      @db.Decimal(20, 2)
  patientId              String
  deductibles            Deductible[]
  patient                Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Deductible {
  id             Int            @id @default(autoincrement())
  insuranceId    Int
  category       String
  deductible     Decimal?       @db.Decimal(20, 2)
  deductibleType DeductibleType
  copay          Decimal?       @db.Decimal(20, 2)
  copayType      CopayType
  min            Decimal?       @db.Decimal(20, 2)
  max            Decimal?       @db.Decimal(20, 2)

  insurance Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

enum DeductibleType {
  all
  each
}

enum CopayType {
  all
  each
}

model PatientDynamicField {
  id             Int     @id @default(autoincrement())
  patientId      String
  dynamicFieldId Int
  value          String?

  patient      Patient      @relation(fields: [patientId], references: [id])
  dynamicField DynamicField @relation(fields: [dynamicFieldId], references: [id])

  @@map("patient_dynamic_field")
}

model DynamicField {
  id                    Int                   @id @default(autoincrement())
  field_name            String                @unique
  field_type            String
  dropdown_options      String?
  radio_buttons         String?
  is_required           Boolean               @default(false)
  category              String
  patient_dynamic_field PatientDynamicField[]

  @@map("dynamic_fields")
}

// Pre-Registration (Front Office)
model PatientPreRegistration {
  id              Int      @id @default(autoincrement())
  temporaryId     String   @unique
  scheduleType    String
  scheduleDate    DateTime
  branch          String
  specialty       String
  doctorName      String
  scheduleTime    String
  slot            String?
  patientFullName String   @db.VarChar(100)
  dob             DateTime
  age             String   @db.VarChar(20)
  gender          String
  mobile          String   @db.VarChar(20)
  email           String   @db.VarChar(50)
  nationalId      String?  @db.VarChar(20)
  whatsappMobile  String   @db.VarChar(15)
  remark          String?  @db.VarChar(500)
  isVIP           Boolean  @default(false)
  scheduledBy     String?
  confirmViaSms   Boolean  @default(false)
  confirmViaEmail Boolean  @default(false)
  remindViaSms    Boolean  @default(false)
  remindViaEmail  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Master Data - General Settings
model AppointmentStatus {
  id          Int      @id @default(autoincrement())
  statusName  String   @db.VarChar(25)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduleType {
  id          Int      @id @default(autoincrement())
  typeName    String   @db.VarChar(25)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id          Int                 @id @default(autoincrement())
  countryName String              @db.VarChar(100)
  countryCode String              @db.VarChar(5)
  isoCode     String              @db.VarChar(10)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  languages   LanguageOnCountry[]
}

model Language {
  id        Int                 @id @default(autoincrement())
  language  String              @db.VarChar(50)
  enabled   Boolean             @default(true)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  countries LanguageOnCountry[]
}

model LanguageOnCountry {
  countryId  Int
  languageId Int
  country    Country  @relation(fields: [countryId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])

  @@id([countryId, languageId])
}

model CallStatus {
  id          Int      @id @default(autoincrement())
  status      String   @db.VarChar(25)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmploymentType {
  id          Int      @id @default(autoincrement())
  type        String   @db.VarChar(25)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Emirates {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(40)
  mainDistrict MainDistrict[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MainDistrict {
  id         Int        @id @default(autoincrement())
  emiratesId Int
  emirates   Emirates   @relation(fields: [emiratesId], references: [id])
  name       String     @db.VarChar(60)
  districts  District[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model District {
  id             Int          @id @default(autoincrement())
  mainDistrictId Int
  mainDistrict   MainDistrict @relation(fields: [mainDistrictId], references: [id])
  name           String       @db.VarChar(60)
  communities    Community[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Community {
  id         Int      @id @default(autoincrement())
  districtId Int
  district   District @relation(fields: [districtId], references: [id])
  name       String   @db.VarChar(60)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ResourceType {
  id          Int      @id @default(autoincrement())
  type        String   @db.VarChar(10)
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InformationSource {
  id          Int      @id @default(autoincrement())
  sourceName  String   @db.VarChar(50)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PatientType {
  id          Int      @id @default(autoincrement())
  typeName    String   @db.VarChar(50)
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
