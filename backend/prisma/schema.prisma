generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  username         String       @unique
  email            String       @unique
  password         String
  branch           String
  role             String?      @default("admin")
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model masterUser {
  id               Int          @id @default(autoincrement())
  empId            String       @unique @db.VarChar(20)
  role             String       @db.VarChar(50)
  username         String       @db.VarChar(100)
  email            String       @unique
  masterPassword   String?
  password         String?
  mobile           String       @db.VarChar(15)
  branch           String       @db.VarChar(50)
  status           String       @default("Active") @db.VarChar(10)
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model NetworkLog {
  id           Int         @id @default(autoincrement())
  userId       Int?
  masterUserId String?
  publicIp     String
  localIp      String
  macAddress   String
  username     String
  loggedAt     DateTime    @default(now())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteruser   masterUser? @relation(fields: [masterUserId], references: [empId], onDelete: Cascade)
}

model Patient {
  patientId            String    @id @default(cuid())
  fullName             String?   @db.VarChar(100)
  dateOfBirth          DateTime?
  age                  Int?      @db.SmallInt
  gender               Gender?
  nationality          String?   @db.VarChar(50)
  email                String?   @unique @db.VarChar(50)
  maritalStatus        String?   @db.VarChar(20)
  visaType             String?   @db.VarChar(20)
  nationalId           String?   @unique @db.VarChar(20)
  otherIdType          String?   @db.VarChar(50)
  otherIdValue         String?   @db.VarChar(20)
  contactNumberMobile  String?   @db.VarChar(15)
  contactNumberWork    String?   @db.VarChar(15)
  consultationType     String?   @db.VarChar(50)
  doctorName           String?   @db.VarChar(100)
  appointmentDate      DateTime?
  speciality           String?   @db.VarChar(50)
  consultationReason   String?   @db.VarChar(200)
  paymentType          String?   @db.VarChar(50)
  insurancePlan        String?   @db.VarChar(50)
  policyNumber         String?   @db.VarChar(50)
  policyExpiryDate     DateTime?
  insuranceCardNumber  String?   @db.VarChar(50)
  insuranceProvider    String?   @db.VarChar(100)
  insuranceSubProvider String?   @db.VarChar(100)
  customFields         Json?
}

enum Gender {
  Male
  Female
  Other
}

model Staff {
  staffId               String                @id @unique @default(uuid())
  role                  String
  designation           String?
  department            String?
  specialist            String?
  firstName             String?
  lastName              String?
  fatherName            String?
  motherName            String?
  gender                String
  maritalStatus         String?
  bloodGroup            String?
  dateOfBirth           DateTime
  dateOfJoining         DateTime?
  phone                 String?
  emergencyContact      String?
  email                 String                @unique
  photo                 String?
  currentAddress        String?
  permanentAddress      String?
  qualification         String?
  workExperience        String?
  specialization        String?
  note                  String?
  panNumber             String?
  nationalIDNumber      String?
  localIDNumber         String?
  referenceContact      String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  patient_dynamic_field PatientDynamicField[]

  @@map("staff")
}

model PatientDynamicField {
  id             Int          @id @default(autoincrement())
  staff_id       String
  dynamicFieldId Int
  value          String
  staff          Staff        @relation(fields: [staff_id], references: [staffId])
  dynamic_field  DynamicField @relation(fields: [dynamicFieldId], references: [id])

  @@map("staff_dynamic_fields")
}

model DynamicField {
  id                    Int                   @id @default(autoincrement())
  field_name            String                @unique
  field_type            String
  dropdown_options      String?
  radio_buttons         String? 
  is_required           Boolean               @default(false) 
  category              String 
  patient_dynamic_field PatientDynamicField[]

  @@map("dynamic_fields")
}
