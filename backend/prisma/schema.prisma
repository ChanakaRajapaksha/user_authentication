generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  username         String       @unique
  email            String       @unique
  password         String
  branch           String
  role             String?      @default("admin")
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model masterUser {
  id               Int          @id @default(autoincrement())
  empId            String       @unique @db.VarChar(20)
  role             String       @db.VarChar(50)
  username         String       @db.VarChar(100)
  email            String       @unique
  masterPassword   String?
  password         String?
  mobile           String       @db.VarChar(15)
  branch           String       @db.VarChar(50)
  status           String       @default("Active") @db.VarChar(10)
  refreshToken     String?      @db.VarChar(255)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  networkLogs      NetworkLog[]
}

model NetworkLog {
  id           Int         @id @default(autoincrement())
  userId       Int?
  masterUserId String?
  publicIp     String
  localIp      String
  macAddress   String
  username     String
  loggedAt     DateTime    @default(now())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteruser   masterUser? @relation(fields: [masterUserId], references: [empId], onDelete: Cascade)
}

model Patient {
  id                  String                @id @unique @default(uuid())
  mrdNumber           String                @unique
  visitType           String                @default("Consultation")
  referralCase        String?
  referredBy          String?               @db.VarChar(100)
  existing            String
  patientType         String?
  registrationDate    DateTime?             @default(now())
  patientPriority     String
  patientFullName     String                @db.VarChar(100)
  dob                 DateTime
  age                 String
  gender              String
  nationality         String
  emailId             String                @db.VarChar(50)
  maritalStatus       String
  visaType            String
  nationalId          String                @db.VarChar(20)
  idType              String
  idNumber            String                @db.VarChar(20)
  mobile              String                @db.VarChar(15)
  work                String?               @db.VarChar(15)
  landPhone           String?               @db.VarChar(15)
  wMobile             String?               @db.VarChar(15)
  preferredLanguage   String?
  occupation          String                @db.VarChar(50)
  infoSource          String
  emirates            String
  place               String                @db.VarChar(50)
  mainDistrict        String
  district            String
  area                String
  address             String                @db.VarChar(500)
  hasanaId            String?               @db.VarChar(20)
  companyName         String                @db.VarChar(70)
  empId               String?               @db.VarChar(20)
  patientRemark       String?               @db.VarChar(500)
  emPerson            String?               @db.VarChar(100)
  emNumber            String?               @db.VarChar(15)
  relationship        String?               @db.VarChar(20)
  alert               String?
  specialty           String
  doctorName          String
  encounterType       String?
  paymentType         String
  corporateName       String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  insurance           Insurance[]
  patientDynamicField PatientDynamicField[]
}
model Insurance {
  id                     Int          @id @default(autoincrement())
  insuranceProvider      String
  subInsurance           String
  networkType            String
  insuranceCardNumber    String       @db.VarChar(20)
  extraCardNumber        String?      @db.VarChar(20)
  insuranceEffectiveDate DateTime
  insuranceExpiryDate    DateTime
  certificateNo          String       @db.VarChar(20)
  dependentsNo           Int          @default(0) @db.TinyInt
  insuranceClaimNo       String?      @db.VarChar(20)
  maxInsuranceLiability  Decimal      @db.Decimal(20, 2)
  insuranceApprovalLimit Decimal      @db.Decimal(20, 2)
  maxInsuranceCoPay      Decimal      @db.Decimal(20, 2)
  coPayPatient           Decimal      @db.Decimal(20, 2)
  patientId              String
  deductibles            Deductible[]
  patient                Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
}
model Deductible {
  id             Int            @id @default(autoincrement())
  insuranceId    Int
  category       String
  deductible     Decimal?       @db.Decimal(20, 2)
  deductibleType DeductibleType
  copay          Decimal?       @db.Decimal(20, 2)
  copayType      CopayType
  min            Decimal?       @db.Decimal(20, 2)
  max            Decimal?       @db.Decimal(20, 2)

  insurance Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

enum DeductibleType {
  all
  each
}

enum CopayType {
  all
  each
}
model PatientDynamicField {
  id             Int     @id @default(autoincrement())
  patientId      String
  dynamicFieldId Int
  value          String?

  patient      Patient      @relation(fields: [patientId], references: [id])
  dynamicField DynamicField @relation(fields: [dynamicFieldId], references: [id])

  @@map("patient_dynamic_field")
}
model DynamicField {
  id                    Int                   @id @default(autoincrement())
  field_name            String                @unique
  field_type            String
  dropdown_options      String?
  radio_buttons         String?
  is_required           Boolean               @default(false)
  category              String
  patient_dynamic_field PatientDynamicField[]

  @@map("dynamic_fields")
}
